[
{
	"uri": "https://k8s-book.vupti.me/usage/kubectl-tips/",
	"title": "Kubectl tips",
	"tags": [],
	"description": "",
	"content": "This page will gather some tips to use kubectl in a more effective way.\nWatch resources status change kubectl have a useful feature to monitor the changes in the status of a resource. For example, when you deploy a pod, there are multiple status before Running (See Pod Lifecycle documentation).\nUsing the --watch/-w option for a get command, enable to watch continuously the status changes of resources:\n# Will provide a new line for each status change in the pods list kubectl get \u0026lt;resource-type\u0026gt; --watch # long format kubectl get \u0026lt;resource-type\u0026gt; -w # short format More and more details The following commands will provide you more and more details about a specific resource.\n# get resource items names only kubectl get \u0026lt;resource-type\u0026gt; -o name # list resource items kubectl get \u0026lt;resource-type\u0026gt; # display labels kubectl get \u0026lt;resource-type\u0026gt; --show-labels # list resource items with more details kubectl get \u0026lt;resource-type\u0026gt; -o wide # get a specific resource item kubectl get \u0026lt;resource-type\u0026gt; \u0026lt;resource-name\u0026gt; # get a specific resource item with more details kubectl describe \u0026lt;resource-type\u0026gt; \u0026lt;resource-name\u0026gt; # yaml export kubectl get \u0026lt;resource-type\u0026gt; \u0026lt;resource-name\u0026gt; -o yaml # json export kubectl get \u0026lt;resource-type\u0026gt; \u0026lt;resource-name\u0026gt; -o json Troubelshooting You can use kubectl to troubleshoot your clusters, deployments or other resources.\n# Monitor pod metrics kubectl top pod \u0026lt;pod-name\u0026gt; # Monitor node metrics kubectl top node \u0026lt;node-name\u0026gt; # Look at pod\u0026#39;s logs kubectl logs -f \u0026lt;pod-name\u0026gt; # Look at a specific pod\u0026#39;s container logs kubectl logs -f \u0026lt;pod-name\u0026gt; -c \u0026lt;container\u0026gt; # Mark node as unschedulable kubectl cordon \u0026lt;node-name\u0026gt; # Empty node in preparation for maintenance kubectl drain \u0026lt;node-name\u0026gt; # Cluster info kubectl cluster-info # Dump cluster state kubectl cluster-info dump --output-directory=/tmp/dump.txt # Config kubectl config view Pod interractions Interact with your pods with the following commands:\n# Run an interactive pod kubectl run -i --tty busybox --image=busybox -- sh # Attach to an existing pod kubectl attach \u0026lt;pod-name\u0026gt; -i # or kubectl exec --stdin --tty \u0026lt;pod-name\u0026gt; -- /bin/sh # Exec a single command in a pod (single container pod) kubectl exec \u0026lt;pod-name\u0026gt; -- ls / # Exec a single command in a pod (multi container pod) kubectl exec \u0026lt;pod-name\u0026gt; -c \u0026lt;container\u0026gt; -- ls / # Forward port 6000 from the pod to local machine port 5000 kubectl port-forward \u0026lt;pod-name\u0026gt; 5000:6000 # Forward port 6000 from the pod to machine port 5000 kubectl port-forward --address 0.0.0.0 \u0026lt;pod-name\u0026gt; 5000:6000 All ! Use following commands to list (all) resources from (all) namespace(s):\n# List resource-type items from all namespaces kubectl get \u0026lt;resource-type\u0026gt; -A # List all resources in current context kubectl get all # List all resources from all namespaces kubectl get all -A "
},
{
	"uri": "https://k8s-book.vupti.me/k3s-cluster-deployment/all-nodes-pre-requisites/",
	"title": "All nodes pre-requisites",
	"tags": [],
	"description": "",
	"content": "Network configuration # Network setup vi /etc/netplan/50-cloud-init.yaml netplan apply Software pre-requisites # Upgrade packages sudo apt update sudo apt upgrade -y # Install software pre-requisites sudo apt-get install python3-pip gcc nfs-common -y NTP time sudo apt-get install ntp -y # check configured servers in: sudo vi /etc/ntp.conf # restart services if needed: sudo /etc/init.d/ntp restart # check ntp status: ntpq -p "
},
{
	"uri": "https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/basics/",
	"title": "Basics tools",
	"tags": [],
	"description": "",
	"content": "Generic pre-requisites We will need pip and gcc for some tools, so lets install them if needed:\nsudo apt-get install python3-pip gcc -y Install kubectl CLI tool In order to test and manage the k3s cluster, it could be useful to have a kubectl cli install in the master nodes:\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl # Test it kubectl version --client kubectl auto-complete Use the following commands to add auto-completion to your bash shell for the kubectl command (or it\u0026rsquo;s k alias)\necho \u0026#39;source \u0026lt;(kubectl completion bash)\u0026#39; \u0026gt;\u0026gt;~/.bashrc echo \u0026#39;alias k=kubectl\u0026#39; \u0026gt;\u0026gt;~/.bashrc echo \u0026#39;complete -F __start_kubectl k\u0026#39; \u0026gt;\u0026gt;~/.bashrc Helm Easy peasy:\ncurl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash "
},
{
	"uri": "https://k8s-book.vupti.me/k3s-cluster-deployment/",
	"title": "Deploy a k3S cluster",
	"tags": [],
	"description": "",
	"content": "Deploy a k3S cluster The following how-to guide provides some step to create a k3s based Kubernetes cluster on Ubuntu 20.04 (LTS).\n"
},
{
	"uri": "https://k8s-book.vupti.me/customizations/traefik/",
	"title": "Traefik as ingress controler",
	"tags": [],
	"description": "",
	"content": " As mentionned on Traefik website: Traefik is an open-source Edge Router that makes publishing your services a fun and easy experience.\nIt could be used as a powerfull Ingress controler to handle incoming requests on the cluster and forward them to the appropriate service.\nInstallation helm repo add traefik https://helm.traefik.io/traefik helm repo update helm install traefik traefik/traefik Test it Get the whoami.yaml file form the bellow attachement files, then:\nRelated files whoami.yaml (0 kb) # Deploy it kubectl apply -f ./whoami.yaml # Run a test command curl -i http://k3s.vlab.lcl -H \u0026#34;Host: mydomain.com\u0026#34; # Output: HTTP/1.1 200 OK Content-Length: 406 Content-Type: text/plain; charset=utf-8 Date: Fri, 22 Jan 2021 14:59:46 GMT Hostname: whoami-app-7564dd9695-dtzrh IP: 127.0.0.1 IP: ::1 IP: 10.42.2.6 IP: fe80::f099:c3ff:fe3e:7071 RemoteAddr: 10.42.1.6:46964 GET / HTTP/1.1 Host: mydomain.com User-Agent: curl/7.68.0 Accept: */* Accept-Encoding: gzip X-Forwarded-For: 10.42.0.8 X-Forwarded-Host: mydomain.com X-Forwarded-Port: 80 X-Forwarded-Proto: http X-Forwarded-Server: traefik-79fdc967bf-5nkxt X-Real-Ip: 10.42.0.8 Here we simulate a DNS record mydomain.com by using the Host HTTP header. It provides a easy way to make a test but of course, for a real service, a DNS record is mandatory.\nHere is a quick demo of the load-balancing made on the whoami service with 4 replicas: Expose the dashboard It is possible to expose both Traefik UI dashboard and API through Traefik itself.\nGet the dashboard.yaml file from below attachements. Before applying, ensure that the content fits your needs, especially the host specified as a matching criteria.\nRelated files dashboard.yaml (0 kb) Create a secret for basic-authentication # To get `htpasswd` tool sudo apt install apache2-utils -y # Create an auth file with data for user \u0026#34;admin\u0026#34; htpasswd -c ./users admin # you will be prompted for password and confirmation # If needed, add other user(s) to the file with **almost** the same command: htpasswd ./users otheradmin # Deploy the file as a new secret kubectl create secret generic admin-auth --from-file users --namespace=default Deploy the dashboard IngressRoute # Deploy it kubectl apply -f ./dashboard.yaml # Test it: curl -I -X GET http://lb.vlab.lcl/dashboard/ | head -n1 # Output: HTTP/1.1 401 Unauthorized curl -Is -X GET http://lb.vlab.lcl/dashboard/ -u \u0026#39;admin:*****\u0026#39; | head -n 1 # Output: HTTP/1.1 200 OK Now, you probably can reach: http://lb.vlab.lcl/dashboard/# from your favorite web brower.\n"
},
{
	"uri": "https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/arkade/",
	"title": "Arkade",
	"tags": [],
	"description": "",
	"content": "Arkade is a great open-source Kubernetes \u0026ldquo;market-place\u0026rdquo; project initiated by @alexellis.\nThe arkade CLI provides a simple method to download your favourite devops CLIs and install helm charts, with a single command.\n# Note: you can also run without `sudo` and move the binary yourself curl -sLS https://dl.get-arkade.dev | sudo sh # Test arkade --help Install a CLI tool # List available CLI tools arkade get # Example: arkade get yq Install a K8S app # List available apps arkade install / --help # Example: kubernetes-dashboard arkade install kubernetes-dashboard "
},
{
	"uri": "https://k8s-book.vupti.me/k3s-cluster-deployment/initial-master-node/",
	"title": "Initial master node",
	"tags": [],
	"description": "",
	"content": "The following section will explain how to deploy the initial master node of the k3s cluster.\nInstall kubectl CLI tool In order to test and manage the k3s cluster, it could be useful to have a kubectl cli install in the master nodes:\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl # Test it kubectl version --client Auto-complete Use the following commands to add auto-completion to your bash shell for the kubectl command (or it\u0026rsquo;s k alias)\necho \u0026#39;source \u0026lt;(kubectl completion bash)\u0026#39; \u0026gt;\u0026gt;~/.bashrc echo \u0026#39;alias k=kubectl\u0026#39; \u0026gt;\u0026gt;~/.bashrc echo \u0026#39;complete -F __start_kubectl k\u0026#39; \u0026gt;\u0026gt;~/.bashrc Deploy # enable read for other users export K3S_KUBECONFIG_MODE=0644 # Deploy a new k3s master node with embeded etcd curl -sfL https://get.k3s.io | sh -s - --disable=traefik --cluster-init Configuration file export KUBECONFIG=/etc/rancher/k3s/k3s.yaml You can test the connection to the cluster by listing the deployed pods and the list of nodes in the cluster (only one will be listed by now):\nkubectl get pods --all-namespaces kubectl get nodes #Output: NAME STATUS ROLES AGE VERSION k3s-mstr-01 Ready control-plane,etcd,master 2m32s v1.20.2+k3s1 Retrieve the cluster token This token will be used to join the other nodes to the current k3s deployment:\nsudo cat /var/lib/rancher/k3s/server/node-token "
},
{
	"uri": "https://k8s-book.vupti.me/customizations/kube-prometheus/",
	"title": "Monitoring with Prometheus",
	"tags": [],
	"description": "",
	"content": "The kube-prometheus project collects Kubernetes manifests, Grafana dashboards, and Prometheus rules combined with documentation and scripts to provide easy to operate end-to-end Kubernetes cluster monitoring with Prometheus using the Prometheus Operator.\ngit clone https://github.com/prometheus-operator/kube-prometheus.git /tmp/kube-prometheus cd /tmp/kube-prometheus # create the namespace and CRDs kubectl create -f manifests/setup # wait for them to be availble until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo \u0026#34;\u0026#34;; done # create the remaining resources kubectl create -f manifests/ Port-forward method to access dashboard # Prometheus on https://127.0.0.1:9090 kubectl --namespace monitoring port-forward --address 0.0.0.0 svc/prometheus-k8s 9090 # Grafana with user:password admin:admin on https://127.0.0.1:3000 kubectl --namespace monitoring port-forward --address 0.0.0.0 svc/grafana 3000 # Alert Manager on http://127.0.0.1:9093 kubectl --namespace monitoring port-forward --address 0.0.0.0 svc/alertmanager-main 9093 Ingress access to dashboards The following section will explain how you can expose the 3 previously created dashboards through a simple ingress configuration with a basic authentication.\nDNS records Create DNS records for 3 new hosts with a CNAME type and target on the endpoint of your Kubernetes cluster. For example:\nalert.vlab.lcl prometheus.vlab.lcl grafana.vlab.lcl Authentication # To get `htpasswd` tool sudo apt install apache2-utils -y # Create an auth file with data for user \u0026#34;admin\u0026#34; htpasswd -c ./users admin # you will be prompted for password and confirmation # If needed, add other user(s) to the file with **almost** the same command: htpasswd ./users otheradmin # Create a secret named `admin-auth` kubectl create secret generic admin-auth --from-file users --namespace=monitoring Deploy an ingress based on Traefik If needed, please apply content from the Traefik section to prepare Ingress controller.\nDownload the kube-prometheus-ingress-traefik.yaml attached file, customized with your DNS records and apply it:\nRelated files kube-prometheus-ingress-traefik.yaml (1 kb) kubectl apply -f kube-prometheus-ingress-traefik.yaml Test access from ingress Following commands provide a quick way to test the behavior of deployed ingress:\n# Show ingress status kubectl describe ingress grafana-gateway-ingress --namespace=monitoring # Test your access without authentication curl http://grafana.vlab.lcl -Is | head -n 1 # Outpout: HTTP/1.1 401 Unauthorized # Test your access with authentication curl http://grafana.vlab.lcl -u \u0026#39;admin:*****\u0026#39; -Is | head -n 1 # Outpout: HTTP/1.1 200 OK "
},
{
	"uri": "https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/",
	"title": "Setup a powerful Kubernetes client",
	"tags": [],
	"description": "",
	"content": "Setup a powerful Kubernetes client This section provides some tools and tricks to apply to a *nix based workstation or jump server to have a powerful Kubernetes (and other tools) client machine.\n"
},
{
	"uri": "https://k8s-book.vupti.me/customizations/",
	"title": "Cluster customizations",
	"tags": [],
	"description": "",
	"content": "Cluster customizations This chapter aims to cover the customizations you can apply to an existing Kubernetes cluster.\n"
},
{
	"uri": "https://k8s-book.vupti.me/k3s-cluster-deployment/worker-node-s/",
	"title": "Worker node(s)",
	"tags": [],
	"description": "",
	"content": "The following section will explain how to join additional worker nodes to your k3s deployment.\nFirst of all, you will need to get the cluster token, as explained in the previous section and the master node fqdn.\nDeploy k3s to join an existing cluster curl -sfL https://get.k3s.io | \\ K3S_URL=\u0026#34;https://k3s-mstr-01.vlab.lcl:6443\u0026#34; \\ K3S_TOKEN=\u0026#34;K10d1...fe537::server:26a92...e34f9\u0026#34; \\ sh - Check From the master node or any client device with access to the Kubernetes cluster, ensure that the node is now added to the cluster:\nkubectl get nodes "
},
{
	"uri": "https://k8s-book.vupti.me/usage/",
	"title": "Cluster usage",
	"tags": [],
	"description": "",
	"content": "Cluster usage This section will provide tools and tips to use your kubernetes cluster in an effective way.\n"
},
{
	"uri": "https://k8s-book.vupti.me/k3s-cluster-deployment/additional-master-nodes/",
	"title": "Additional master nodes",
	"tags": [],
	"description": "",
	"content": "The following section will explain how to join additional master nodes to your k3s deployment.\nTo run K3s in this mode, you must have an odd number of server nodes.\nFirst of all, you will need to get the cluster token, as explained in the previous section and the master node fqdn.\nDeploy k3s to join an existing cluster curl -sfL https://get.k3s.io | \\ K3S_URL=\u0026#34;https://k3s-mstr-01.vlab.lcl:6443\u0026#34; \\ K3S_TOKEN=\u0026#34;K10d1...fe537::server:26a92...e34f9\u0026#34; \\ INSTALL_K3S_EXEC=\u0026#34;server\u0026#34; \\ sh - --no-deploy=traefik Check From the master node or any client device with access to the Kubernetes cluster, ensure that the node is now added to the cluster:\nkubectl get nodes # Output: NAME STATUS ROLES AGE VERSION k3s-mstr-01 Ready control-plane,etcd,master 4m25s v1.20.2+k3s1 k3s-mstr-02 Ready control-plane,etcd,master 3m33s v1.20.2+k3s1 k3s-mstr-03 Ready control-plane,etcd,master 2m27s v1.20.2+k3s1 "
},
{
	"uri": "https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/k9s/",
	"title": "k9s",
	"tags": [],
	"description": "",
	"content": "K9s is a terminal based UI to interact with your Kubernetes clusters. The aim of this project is to make it easier to navigate, observe and manage your deployed applications in the wild.\nK9s continually watches Kubernetes for changes and offers subsequent commands to interact with your observed resources.\nCLI installation curl -L https://github.com/derailed/k9s/releases/download/v0.24.2/k9s_Linux_x86_64.tar.gz | tar -xz chmod +x k9s \u0026amp;\u0026amp; sudo mv ./k9s /usr/local/bin/k9s k9s version Skin Apply a pre-defined skin to the output:\nmkdir -p ~/.k9s curl -L https://raw.githubusercontent.com/derailed/k9s/master/skins/one_dark.yml \u0026gt; ~/.k9s/skin.yml # or curl -L https://raw.githubusercontent.com/derailed/k9s/master/skins/solarized_dark.yml \u0026gt; ~/.k9s/skin.yml "
},
{
	"uri": "https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/kubens-and-kubectx/",
	"title": "kubens &amp; kubectx",
	"tags": [],
	"description": "",
	"content": " Thanks to @ahmetb: https://github.com/ahmetb/kubectx\nkubectxis a utility to manage and switch between kubectl contexts. kubensis a utility to switch between Kubernetes namespaces. sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens Then you can easly switch both context and namespace by:\nkubectx # list contexts kubectx \u0026lt;name\u0026gt; # switch context kubens # list namespace kubens \u0026lt;name\u0026gt; # switch namespace "
},
{
	"uri": "https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/jsonnet/",
	"title": "jsonnet",
	"tags": [],
	"description": "",
	"content": "Jsonnet is a data templating language for app and tool developers\nGenerate config data Side-effect free Organize, simplify, unify Manage sprawling config # Update or install golang support sudo apt install golang # Expand PATH with `go get` binary folder echo \u0026#39;PATH=\u0026#34;~/go/bin/:\u0026#34;$PATH\u0026#39; \u0026gt;\u0026gt; ~/.bashrc . ~/.bashrc # Install with go go get github.com/google/go-jsonnet/cmd/jsonnet # Test it jsonnet --version gojsontoyaml jsonnet provides json files but it is more easy to use yaml ones. gojsontoyaml provide a simple way to convert the jsonnet result files to yaml ones.\n# Install with go go get github.com/brancz/gojsontoyaml # Test if echo \u0026#34;{\u0026#39;installed\u0026#39;: true}\u0026#34; | gojsontoyaml "
},
{
	"uri": "https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/octant/",
	"title": "Octant",
	"tags": [],
	"description": "",
	"content": "Octant is a tool for developers to understand how applications run on a Kubernetes cluster.\nIt aims to be part of the developer\u0026rsquo;s toolkit for gaining insight and approaching complexity found in Kubernetes. Octant offers a combination of introspective tooling, cluster navigation, and object management along with a plugin system to further extend its capabilities.\nInstallation curl -L https://github.com/vmware-tanzu/octant/releases/download/v0.16.3/octant_0.16.3_Linux-64bit.deb \u0026gt; /tmp/octant.deb dpkg -i /tmp/octant.deb # To run and access octant from http://localhost:7777 octant # To remotly run and access octant: OCTANT_LISTENER_ADDR=X.X.X.X:7777 OCTANT_ACCEPTED_HOSTS=Y.Y.Y.Y octant --disable-open-browser "
},
{
	"uri": "https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/argo-cli/",
	"title": "Argo cli",
	"tags": [],
	"description": "",
	"content": " If you need to use Argo from this client machine.\ncurl -sL https://github.com/argoproj/argo/releases/download/latest/argo-linux-amd64.gz | gunzip \u0026gt; argo chmod +x argo \u0026amp;\u0026amp; sudo mv ./argo /usr/local/bin/argo argo version Configuration # Argo namespace export ARGO_NAMESPACE=argo # Start port forwarding kubectl -n $ARGO_NAMESPACE port-forward deployment/argo-server 2746:2746 \u0026amp; # keep it running in bg; user the following command to get the job number: jobs # if needed: get it back in foreground: fg 1 "
},
{
	"uri": "https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/openfaas-cli/",
	"title": "OpenFaaS CLI",
	"tags": [],
	"description": "",
	"content": " If you need to use OpenFaaS from the client machine.\nOne-liner:\n# openfaas-cli curl -sSL https://cli.openfaas.com | sudo sh Configuration # Set namespace export OS_NS=\u0026#34;openfaas\u0026#34; # Get password export OF_PASS=$(echo $(kubectl -n $OS_NS get secret basic-auth -o jsonpath=\u0026#34;{.data.basic-auth-password}\u0026#34; | base64 --decode)) echo $OF_PASS # Get URI echo \u0026#34;export OPENFAAS_URL=http://\u0026#34;$(kubectl -n $OS_NS describe pods $(kubectl -n $OS_NS get pods | grep \u0026#34;gateway-\u0026#34; | awk \u0026#39;{print $1}\u0026#39;) | grep \u0026#34;^Node:\u0026#34; | awk -F \u0026#34;/\u0026#34; \u0026#39;{print $2}\u0026#39;)\u0026#34;:31112\u0026#34; Login echo $OF_PASS | faas-cli login --password-stdin "
},
{
	"uri": "https://k8s-book.vupti.me/",
	"title": "My Kubernetes Book",
	"tags": [],
	"description": "",
	"content": "My Kubernetes book The following book is a personal note-book to keep some relevant informations about Kubernetes and k8s related products, for my personal and/or professional use.\nThis is not a substitution to official projects documentation, just a quick way for me to get the information I need.\nHow to contribute ? This website is built on Hugo static website engine with the learn theme.\nYou can contribute by suggesting issues or pull-requests on the GitHub project.\nAs a pre-requesite to local build, you will need Hugo engine installed: Quick Start Clone the repository with submodules: git clone --recursive https://github.com/lrivallain/git-book-kubernetes.git Push changes to a new branch: # new branch: git checkout -b \u0026#34;my-changes\u0026#34; # \u0026lt;do changes here !\u0026gt; # test your changes with: hugo server # \u0026lt;git add / git commit / git push\u0026gt; Create a pull request on the project. Once accepted and merged to master, the static will be run through this Publish GitHub Action "
},
{
	"uri": "https://k8s-book.vupti.me/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://k8s-book.vupti.me/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]